{"version":3,"sources":["serviceWorker.js","components/chartDialog.jsx","components/chart.jsx","components/chartContainer.jsx","components/lightSwitch.jsx","components/navbar.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ChartDialog","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","setState","show","handleShow","handleCategoryChange","event","newSubCategories","category","target","value","selectedCategory","selectedSubCategory","subCategories","handleChange","defineProperty","name","handleSubmit","form","currentTarget","preventDefault","stopPropagation","checkValidity","validated","loadChart","state","selectedPage","chartNumber","selectedFilter","categories","addButtonText","_this2","chart","title","text","react_default","a","createElement","className","map","index","key","Button_default","variant","onClick","Modal_default","onHide","Header","closeButton","Title","Body","Form_default","noValidate","onSubmit","e","Row","Group","Label","Control","onChange","as","type","min","step","required","rel","href","Footer","Component","Chart","handleRemoveChart","clearChart","modalShow","verticallyCenter","series","Fragment","highcharts_react_min_default","highcharts","Highcharts","options","OverlayTrigger_default","trigger","overlay","closeTooltip","chartDialog","Popover_default","id","ChartContainer","charts","loadChartData","components_chart","LightSwitch","placement","darkThemeToolTip","getSwitchIcon","checked","lightSwitched","onLightSwitch","classes","React","Navbar","lightSwitch","App","handleLightSwitch","newCharts","isLightSwitched","i","assign","createChartBody","data","subCategory","units","theme","getCurrentTheme","chartNames","getChartTitle","yAxis","getUnitofMeasurement","style","color","textColor","backgroundColor","legend","enabled","xAxis","labels","gridLineColor","gridColor","colorByPoint","page","filter","fetch","then","res","json","result","createChartData","results","isLoaded","error","requestData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","parseInt","push","y","err","return","unit","charAt","toUpperCase","slice","darkTheme","lightTheme","document","getElementsByTagName","getCurrentThemeName","navbar","chartContainer","bind","linearGradient","x1","y1","x2","y2","stops","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e9834cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/lib/Modal\";\r\nimport Button from \"react-bootstrap/lib/Button\";\r\nimport Form from \"react-bootstrap/lib/Form\";\r\n\r\nclass ChartDialog extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.categories = [\"starships\", \"vehicles\", \"people\"];\r\n    this.state = {\r\n      show: this.props.show,\r\n      validated: false,\r\n      subCategories: [\"crew\", \"passengers\", \"length\"],\r\n      selectedCategory: \"starships\",\r\n      selectedSubCategory: \"crew\",\r\n      selectedPage: \"1\",\r\n      selectedFilter: 220\r\n    };\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      show: false\r\n    });\r\n  };\r\n\r\n  handleShow = () => {\r\n    this.setState({\r\n      show: true\r\n    });\r\n  };\r\n\r\n  handleCategoryChange = event => {\r\n    let category = event.target.value;\r\n    let newSubCategories;\r\n    if (category === \"starships\" || category === \"vehicles\") {\r\n      newSubCategories = [\"crew\", \"length\", \"passengers\"];\r\n    } else {\r\n      newSubCategories = [\"height\", \"mass\"];\r\n    }\r\n    this.setState({\r\n      selectedCategory: category,\r\n      selectedSubCategory: newSubCategories[0],\r\n      subCategories: newSubCategories\r\n    });\r\n  };\r\n\r\n  // Handle changes outside from category change\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    const form = event.currentTarget;\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (form.checkValidity() === false) {\r\n      this.setState({ validated: true });\r\n    } else {\r\n      this.setState({ show: false });\r\n      this.props.loadChart(\r\n        this.state.selectedCategory,\r\n        this.state.selectedSubCategory,\r\n        this.state.selectedPage,\r\n        this.props.chartNumber,\r\n        this.state.selectedFilter\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let addButtonText;\r\n    // Indicate loading on add button if chart is loading.\r\n    if (this.props.chart.title && this.props.chart.title.text === \"loading\") {\r\n      addButtonText = (\r\n        <span>\r\n          <i className=\"fas fa-sync-alt loading-spinner\" /> Loading\r\n        </span>\r\n      );\r\n    } else {\r\n      addButtonText = <span>Add chart</span>;\r\n    }\r\n    // Generate list items.\r\n    const { validated } = this.state;\r\n    let categories = this.categories.map((category, index) => (\r\n      <option key={index} index={index} value={category}>\r\n        {category}\r\n      </option>\r\n    ));\r\n    let subCategories = this.state.subCategories.map((category, index) => (\r\n      <option key={index} value={category}>\r\n        {category}\r\n      </option>\r\n    ));\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={this.handleShow}\r\n          className=\"add-chart\"\r\n        >\r\n          {addButtonText}\r\n        </Button>\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add chart</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form\r\n              noValidate\r\n              validated={validated}\r\n              onSubmit={e => this.handleSubmit(e)}\r\n            >\r\n              <Form.Row>\r\n                <Form.Group className=\"dialog-select-group\">\r\n                  <Form.Label>Category</Form.Label>\r\n                  <Form.Control\r\n                    onChange={this.handleCategoryChange}\r\n                    as=\"select\"\r\n                  >\r\n                    {categories}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group className=\"dialog-select-group\">\r\n                  <Form.Label>Property</Form.Label>\r\n                  <Form.Control\r\n                    name=\"selectedSubCategory\"\r\n                    onChange={this.handleChange}\r\n                    as=\"select\"\r\n                    value={this.state.selectedSubCategory}\r\n                  >\r\n                    {subCategories}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Page</Form.Label>\r\n                  <Form.Control\r\n                    name=\"selectedPage\"\r\n                    onChange={this.handleChange}\r\n                    as=\"select\"\r\n                  >\r\n                    <option key=\"1\" value=\"1\">\r\n                      1\r\n                    </option>\r\n                    <option key=\"2\" value=\"2\">\r\n                      2\r\n                    </option>\r\n                    <option key=\"3\" value=\"3\">\r\n                      3\r\n                    </option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group>\r\n                  <Form.Label>Filter maximum value</Form.Label>\r\n                  <Form.Control\r\n                    name=\"selectedFilter\"\r\n                    type=\"number\"\r\n                    min=\"10\"\r\n                    step=\"5\"\r\n                    value={this.state.selectedFilter}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    Request URL <i className=\"fas fa-link\" />\r\n                  </Form.Label>\r\n                  <br />\r\n                  <a\r\n                    className=\"form-control\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    href={\r\n                      \"https://swapi.co/api/\" +\r\n                      this.state.selectedCategory +\r\n                      \"/?page=\" +\r\n                      this.state.selectedPage\r\n                    }\r\n                  >\r\n                    {\"https://swapi.co/api/\" +\r\n                      this.state.selectedCategory +\r\n                      \"/?page=\" +\r\n                      this.state.selectedPage}\r\n                  </a>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Modal.Footer>\r\n                <Button type=\"submit\">Create</Button>\r\n                <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                  Cancel\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartDialog;\r\n","import React, { Component } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport ChartDialog from \"./chartDialog\";\r\nimport Popover from \"react-bootstrap/lib/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/lib/OverlayTrigger\";\r\n\r\nclass Chart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalShow: false,\r\n      verticallyCenter: true\r\n    };\r\n  }\r\n\r\n  handleRemoveChart = () => {\r\n    this.props.clearChart(this.props.chartNumber);\r\n  };\r\n\r\n  // Render chart if data is present, button to open dialog if not.\r\n  render() {\r\n    let modalClose = () => this.setState({ modalShow: false });\r\n    let chartElement;\r\n    if (this.props.chart.series) {\r\n      chartElement = (\r\n        <React.Fragment>\r\n          <HighchartsReact highcharts={Highcharts} options={this.props.chart} />\r\n          <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={closeTooltip}>\r\n            <button className=\"remove-chart\" onClick={this.handleRemoveChart}>\r\n              X\r\n            </button>\r\n          </OverlayTrigger>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      chartElement = (\r\n        <ChartDialog\r\n          show={this.state.modalShow}\r\n          onHide={modalClose}\r\n          chart={this.props.chart}\r\n          loadChart={this.props.loadChart}\r\n          chartNumber={this.props.chartNumber}\r\n        />\r\n      );\r\n    }\r\n    return chartElement;\r\n  }\r\n}\r\n\r\nconst closeTooltip = (\r\n  <Popover id=\"popover-trigger-hover-focus\">Close chart</Popover>\r\n);\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"./chart\";\r\n\r\nclass ChartContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      charts: this.props.charts,\r\n      loadChartData: this.props.loadChartData,\r\n      clearChart: this.props.clearChart\r\n    };\r\n  }\r\n  // Renders the 2 x 2 chart grid.\r\n  render() {\r\n    let charts = this.props.charts.map((chart, index) => (\r\n      <div key={index} className={\"col span_\" + ((index % 2) + 1) + \"_of_2\"}>\r\n        <Chart\r\n          loadChart={this.props.loadChart}\r\n          clearChart={this.props.clearChart}\r\n          chart={chart}\r\n          chartNumber={index}\r\n        />\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"chart-container\">\r\n        <React.Fragment>{charts}</React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartContainer;\r\n","import React from \"react\";\r\nimport Popover from \"react-bootstrap/lib/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/lib/OverlayTrigger\";\r\n\r\nclass LightSwitch extends React.Component {\r\n  // The light switch is the trigger for dark/light mode.\r\n  render() {\r\n    return (\r\n      <span id=\"light-switch-container\" className=\"btn-group-toggle\">\r\n        <OverlayTrigger\r\n          placement=\"left\"\r\n          trigger={[\"hover\"]}\r\n          overlay={darkThemeToolTip}\r\n        >\r\n          <label className=\"btn btn-secondary\">\r\n            <i className={this.getSwitchIcon()} />\r\n            <input\r\n              name=\"lightSwitch\"\r\n              type=\"checkbox\"\r\n              checked={this.props.lightSwitched}\r\n              onChange={this.props.onLightSwitch}\r\n            />\r\n          </label>\r\n        </OverlayTrigger>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  getSwitchIcon() {\r\n    let classes = \"fa-lightbulb \";\r\n    classes += this.props.lightSwitched ? \"fas\" : \"far\";\r\n    return classes;\r\n  }\r\n}\r\n\r\nconst darkThemeToolTip = (\r\n  <Popover id=\"popover-trigger-hover-focus\">Toggle dark theme</Popover>\r\n);\r\n\r\nexport default LightSwitch;\r\n","import React from \"react\";\r\nimport LightSwitch from \"./lightSwitch\";\r\n\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a\r\n          className=\"navbar-brand\"\r\n          href=\"https://ctamas.github.io/swapiCharts/\"\r\n        >\r\n          <i className=\"far fa-chart-bar\" />\r\n          <span id=\"title\">Star Wars API React Charts</span>\r\n          <LightSwitch\r\n            lightSwitched={this.props.lightSwitched}\r\n            onLightSwitch={this.props.onLightSwitch}\r\n            id=\"lightSwitch\"\r\n          />\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport ChartContainer from \"./components/chartContainer\";\r\nimport Navbar from \"./components/navbar\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      isLightSwitched: false,\r\n      charts: [{}, {}, {}, {}]\r\n    };\r\n    this.chartNames = [];\r\n    // Charts to be loaded as default\r\n    this.loadChart(\"starships\", \"crew\", \"1\", 0, 220);\r\n    this.loadChart(\"people\", \"height\", \"2\", 3, 220);\r\n  }\r\n\r\n  handleLightSwitch = () => {\r\n    let newCharts = [{}, {}, {}, {}];\r\n    this.setState(\r\n      {\r\n        isLightSwitched: !this.state.isLightSwitched\r\n      },\r\n      // Wait for light switch status update before updating chart with new theme.\r\n      () => {\r\n        for (let i = 0; i < 4; i++) {\r\n          // Only re-theme existing charts.\r\n          if (this.state.charts[i].title) {\r\n            Object.assign(newCharts[i], this.createChartBody(i));\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          charts: newCharts\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  getCurrentTheme() {\r\n    return this.state.isLightSwitched ? darkTheme : lightTheme;\r\n  }\r\n\r\n  getCurrentThemeName() {\r\n    return this.state.isLightSwitched ? \"dark-theme\" : \"light-theme\";\r\n  }\r\n\r\n  render() {\r\n    // Set global background to dark/light theme\r\n    document.getElementsByTagName(\r\n      \"html\"\r\n    )[0].className = this.getCurrentThemeName();\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={this.getCurrentThemeName()}>\r\n          <Navbar\r\n            lightSwitched={this.state.isLightSwitched}\r\n            onLightSwitch={this.handleLightSwitch}\r\n          />\r\n          <ChartContainer\r\n            id=\"chart-container\"\r\n            loadChart={this.loadChart.bind(this)}\r\n            clearChart={this.clearChart.bind(this)}\r\n            charts={this.state.charts}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  createChartBody = (chartNumber, data, category, subCategory) => {\r\n    let theme = this.getCurrentTheme();\r\n    let units;\r\n    // This section deals with keeping old chart values where relevant while updating chart theme.\r\n    this.chartNames[chartNumber] = category\r\n      ? this.getChartTitle(category, subCategory)\r\n      : this.chartNames[chartNumber];\r\n    if (!this.state.charts[chartNumber].yAxis) {\r\n      units = this.getUnitofMeasurement(subCategory);\r\n    } else {\r\n      units = this.state.charts[chartNumber].yAxis.title.text;\r\n    }\r\n\r\n    let chartTemplate = {\r\n      title: {\r\n        text: this.chartNames[chartNumber],\r\n        style: {\r\n          color: theme.textColor\r\n        }\r\n      },\r\n      chart: {\r\n        backgroundColor: theme.backgroundColor,\r\n        type: \"column\"\r\n      },\r\n      legend: {\r\n        enabled: false\r\n      },\r\n      xAxis: {\r\n        labels: {\r\n          style: {\r\n            color: theme.textColor\r\n          }\r\n        },\r\n        type: \"category\"\r\n      },\r\n      yAxis: {\r\n        gridLineColor: theme.gridColor,\r\n        labels: {\r\n          style: {\r\n            color: theme.textColor\r\n          }\r\n        },\r\n        title: {\r\n          style: {\r\n            color: theme.textColor\r\n          },\r\n          text: units\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          colorByPoint: true,\r\n          data: data ? data : this.state.charts[chartNumber].series[0].data\r\n        }\r\n      ]\r\n    };\r\n    return chartTemplate;\r\n  };\r\n\r\n  clearChart = chartNumber => {\r\n    let newCharts = this.state.charts;\r\n    newCharts[chartNumber] = {};\r\n    this.setState({\r\n      charts: newCharts\r\n    });\r\n  };\r\n\r\n  loadChart = (category, subCategory, page, chartNumber, filter) => {\r\n    let charts = this.state.charts;\r\n    // Let chart component know loading is in progress.\r\n    charts[chartNumber] = { title: { text: \"loading\" } };\r\n    // Load chart.\r\n    this.setState({ charts: charts });\r\n    fetch(\"https://swapi.co/api/\" + category + \"/?page=\" + page)\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          charts[chartNumber] = this.createChartBody(\r\n            chartNumber,\r\n            this.createChartData(result.results, subCategory, filter),\r\n            category,\r\n            subCategory\r\n          );\r\n          this.setState({\r\n            isLoaded: true,\r\n            charts: charts\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  };\r\n\r\n  // Bring data from API to the format accepted by Highcharts.\r\n  createChartData = (category, subCategory, filter) => {\r\n    let requestData = [];\r\n    for (let element of category) {\r\n      if (parseInt(element[subCategory]) < filter) {\r\n        requestData.push({\r\n          name: element.name,\r\n          y: parseInt(element[subCategory])\r\n        });\r\n      }\r\n    }\r\n\r\n    return requestData;\r\n  };\r\n\r\n  getUnitofMeasurement = subCategory => {\r\n    let unit;\r\n    if (subCategory === \"crew\" || subCategory === \"passengers\") {\r\n      unit = \"People\";\r\n    } else if (subCategory === \"length\") {\r\n      unit = \"Meters\";\r\n    } else if (subCategory === \"mass\") {\r\n      unit = \"Kilograms\";\r\n    } else if (subCategory === \"height\") {\r\n      unit = \"Centimeters\";\r\n    }\r\n    return unit;\r\n  };\r\n\r\n  getChartTitle = (category, subCategory) => {\r\n    let title;\r\n    title =\r\n      subCategory.charAt(0).toUpperCase() +\r\n      subCategory.slice(1) +\r\n      \" of \" +\r\n      category;\r\n    return title;\r\n  };\r\n}\r\n\r\nconst darkTheme = {\r\n  textColor: \"#E0E0E3\",\r\n  gridColor: \"#707073\",\r\n  backgroundColor: {\r\n    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 0 },\r\n    stops: [[0, \"#2a2a2b\"], [1, \"#3e3e40\"]]\r\n  }\r\n};\r\nconst lightTheme = {\r\n  textColor: \"#333333\",\r\n  gridColor: \"#e6e6e6\",\r\n  backgroundColor: \"#ffffff\"\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\n\n//render(<Chart chart={options} />, document.getElementById(\"root\"));\n//render(<ChartContainer />, document.getElementById(\"root\"));\n\nrender(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}