{"version":3,"sources":["serviceWorker.js","components/chartDialog.jsx","components/chart.jsx","components/chartContainer.jsx","components/lightSwitch.jsx","components/navbar.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ChartDialog","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCategoryChange","event","newSubCategories","category","target","value","setState","selectedCategory","selectedSubCategory","subCategories","handleSubCategoryChange","handlePageChange","selectedPage","handleFilterChange","selectedFilter","handleShow","bind","assertThisInitialized","handleClose","categories","state","show","validated","currentTarget","checkValidity","preventDefault","stopPropagation","loadChartData","chartNumber","_this2","map","index","react_default","a","createElement","key","Button_default","variant","onClick","className","Modal_default","onHide","Header","closeButton","Title","Body","Form_default","noValidate","onSubmit","e","handleSubmit","Row","Group","Label","Control","onChange","as","type","min","step","required","Footer","Component","Chart","handleRemoveChart","clearChart","modalShow","verticallyCenter","chart","series","Fragment","highcharts_react_min_default","highcharts","Highcharts","options","OverlayTrigger_default","trigger","overlay","closeTooltip","chartDialog","Popover_default","id","ChartContainer","charts","components_chart","LightSwitch","getSwitchIcon","name","checked","lightSwitched","onLightSwitch","classes","React","Navbar","href","lightSwitch","App","handleLightSwitch","console","log","newCharts","isLightSwitched","i","title","createGraphBody","data","subCategory","units","theme","getCurrentTheme","text","getChartTitle","yAxis","getUnitofMeasurement","style","color","textColor","backgroundColor","legend","enabled","xAxis","labels","gridLineColor","gridColor","colorByPoint","page","filter","fetch","then","res","json","result","createChartData","results","isLoaded","error","requestData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","parseInt","push","y","err","return","unit","charAt","toUpperCase","slice","darkTheme","lightTheme","document","getElementsByTagName","getCurrentThemeName","navbar","chartContainer","linearGradient","x1","y1","x2","y2","stops","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f474bb02.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/lib/Modal\";\r\nimport Button from \"react-bootstrap/lib/Button\";\r\nimport Form from \"react-bootstrap/lib/Form\";\r\n\r\nclass ChartDialog extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n    this.categories = [\"starships\", \"vehicles\", \"people\"];\r\n    this.state = {\r\n      show: this.props.show,\r\n      validated: false,\r\n      subCategories: [\"crew\", \"passengers\", \"length\"],\r\n      selectedCategory: \"starships\",\r\n      selectedSubCategory: \"crew\",\r\n      selectedPage: \"1\",\r\n      selectedFilter: 220\r\n    };\r\n  }\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      show: false\r\n    });\r\n  }\r\n\r\n  handleShow() {\r\n    this.setState({\r\n      show: true\r\n    });\r\n  }\r\n\r\n  handleCategoryChange = event => {\r\n    let category = event.target.value;\r\n    let newSubCategories;\r\n    if (category === \"starships\" || category === \"vehicles\") {\r\n      newSubCategories = [\"crew\", \"length\", \"passengers\"];\r\n    } else {\r\n      newSubCategories = [\"height\", \"mass\"];\r\n    }\r\n    this.setState({\r\n      selectedCategory: category,\r\n      selectedSubCategory: newSubCategories[0],\r\n      subCategories: newSubCategories\r\n    });\r\n  };\r\n\r\n  handleSubCategoryChange = event => {\r\n    this.setState({ selectedSubCategory: event.target.value });\r\n  };\r\n\r\n  handlePageChange = event => {\r\n    this.setState({ selectedPage: event.target.value });\r\n  };\r\n\r\n  handleFilterChange = event => {\r\n    this.setState({ selectedFilter: event.target.value });\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.setState({ validated: true });\r\n    } else {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.setState({ show: false });\r\n      this.props.loadChartData(\r\n        this.state.selectedCategory,\r\n        this.state.selectedSubCategory,\r\n        this.state.selectedPage,\r\n        this.props.chartNumber,\r\n        this.state.selectedFilter\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { validated } = this.state;\r\n    let categories = this.categories.map((category, index) => (\r\n      <option key={index} index={index} value={category}>\r\n        {category}\r\n      </option>\r\n    ));\r\n    let subCategories = this.state.subCategories.map((category, index) => (\r\n      <option key={index} value={category}>\r\n        {category}\r\n      </option>\r\n    ));\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"secondary\"\r\n          onClick={this.handleShow}\r\n          className=\"add-chart\"\r\n        >\r\n          Add chart\r\n        </Button>\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add chart</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form\r\n              noValidate\r\n              validated={validated}\r\n              onSubmit={e => this.handleSubmit(e)}\r\n            >\r\n              <Form.Row>\r\n                <Form.Group>\r\n                  <Form.Label>Category</Form.Label>\r\n                  <Form.Control\r\n                    onChange={this.handleCategoryChange}\r\n                    as=\"select\"\r\n                  >\r\n                    {categories}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Property</Form.Label>\r\n                  <Form.Control\r\n                    onChange={this.handleSubCategoryChange}\r\n                    as=\"select\"\r\n                  >\r\n                    {subCategories}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Page</Form.Label>\r\n                  <Form.Control onChange={this.handlePageChange} as=\"select\">\r\n                    <option key=\"1\" value=\"1\">\r\n                      1\r\n                    </option>\r\n                    <option key=\"2\" value=\"2\">\r\n                      2\r\n                    </option>\r\n                    <option key=\"3\" value=\"3\">\r\n                      3\r\n                    </option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group>\r\n                  <Form.Label>Filter maximum value</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    min=\"10\"\r\n                    step=\"5\"\r\n                    value={this.state.selectedFilter}\r\n                    onChange={this.handleFilterChange}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Modal.Footer>\r\n                <Button type=\"submit\">Create</Button>\r\n                <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                  Cancel\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartDialog;\r\n","import React, { Component } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport ChartDialog from \"./chartDialog\";\r\nimport Popover from \"react-bootstrap/lib/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/lib/OverlayTrigger\";\r\n\r\nclass Chart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalShow: false,\r\n      verticallyCenter: true\r\n    };\r\n  }\r\n\r\n  handleRemoveChart = () => {\r\n    this.props.clearChart(this.props.chartNumber);\r\n  };\r\n\r\n  // Render graph is data is present, render placeholder and call dialog if not.\r\n  render() {\r\n    let modalClose = () => this.setState({ modalShow: false });\r\n    let chartElement;\r\n    if (this.props.chart.series) {\r\n      chartElement = (\r\n        <React.Fragment>\r\n          <HighchartsReact highcharts={Highcharts} options={this.props.chart} />\r\n          <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={closeTooltip}>\r\n            <button className=\"remove-chart\" onClick={this.handleRemoveChart}>\r\n              X\r\n            </button>\r\n          </OverlayTrigger>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      chartElement = (\r\n        <ChartDialog\r\n          show={this.state.modalShow}\r\n          onHide={modalClose}\r\n          loadChartData={this.props.loadChartData}\r\n          chartNumber={this.props.chartNumber}\r\n        />\r\n      );\r\n    }\r\n    return chartElement;\r\n  }\r\n}\r\n\r\nconst closeTooltip = (\r\n  <Popover id=\"popover-trigger-hover-focus\">Close chart</Popover>\r\n);\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"./chart\";\r\n\r\nclass ChartContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      charts: this.props.charts,\r\n      loadChartData: this.props.loadChartData,\r\n      clearChart: this.props.clearChart\r\n    };\r\n  }\r\n  // Renders the 2 x 2 chart grid.\r\n  render() {\r\n    let charts = this.props.charts.map((chart, index) => (\r\n      <div key={index} className={\"col span_\" + ((index % 2) + 1) + \"_of_2\"}>\r\n        <Chart\r\n          loadChartData={this.props.loadChartData}\r\n          clearChart={this.props.clearChart}\r\n          chart={chart}\r\n          chartNumber={index}\r\n        />\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"chart-container\">\r\n        <React.Fragment>{charts}</React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartContainer;\r\n","import React from \"react\";\r\n\r\nclass LightSwitch extends React.Component {\r\n  // The light switch is the trigger for dark/light mode.\r\n  render() {\r\n    return (\r\n      <span id=\"light-switch-container\" className=\"btn-group-toggle\">\r\n        <label className=\"btn btn-secondary\">\r\n          <i className={this.getSwitchIcon()} />\r\n          <input\r\n            name=\"lightSwitch\"\r\n            type=\"checkbox\"\r\n            checked={this.props.lightSwitched}\r\n            onChange={this.props.onLightSwitch}\r\n          />\r\n        </label>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  getSwitchIcon() {\r\n    let classes = \"fa-lightbulb \";\r\n    classes += this.props.lightSwitched ? \"fas\" : \"far\";\r\n    return classes;\r\n  }\r\n}\r\n\r\nexport default LightSwitch;\r\n","import React from \"react\";\r\nimport LightSwitch from \"./lightSwitch\";\r\n\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          <i className=\"far fa-chart-bar\" />\r\n          <span id=\"title\">Star Wars API React Charts</span>\r\n          <LightSwitch\r\n            lightSwitched={this.props.lightSwitched}\r\n            onLightSwitch={this.props.onLightSwitch}\r\n            id=\"lightSwitch\"\r\n          />\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ChartContainer from \"./components/chartContainer\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      isLightSwitched: false,\n      charts: [{}, {}, {}, {}]\n    };\n    // Charts to be loaded as default\n    this.loadChartData(\"starships\", \"crew\", \"1\", 0, 220);\n    this.loadChartData(\"people\", \"height\", \"2\", 3, 220);\n  }\n\n  handleLightSwitch = () => {\n    console.log(\"handled switch\", this.state.charts);\n\n    let newCharts = [{}, {}, {}, {}];\n    this.setState(\n      {\n        isLightSwitched: !this.state.isLightSwitched\n      },\n      // Wait for light switch status update before updating chart with new theme.\n      () => {\n        for (let i = 0; i < 4; i++) {\n          if (this.state.charts[i].title) {\n            newCharts[i] = this.createGraphBody(i);\n          }\n        }\n\n        this.setState({\n          charts: newCharts\n        });\n      }\n    );\n  };\n\n  getCurrentTheme() {\n    return this.state.isLightSwitched ? darkTheme : lightTheme;\n  }\n\n  getCurrentTheme() {\n    return this.state.isLightSwitched ? darkTheme : lightTheme;\n  }\n\n  getCurrentThemeName() {\n    return this.state.isLightSwitched ? \"dark-theme\" : \"light-theme\";\n  }\n\n  render() {\n    // Set global background to dark/light theme\n    document.getElementsByTagName(\n      \"html\"\n    )[0].className = this.getCurrentThemeName();\n\n    return (\n      <React.Fragment>\n        <div className={this.getCurrentThemeName()}>\n          <Navbar\n            lightSwitched={this.state.isLightSwitched}\n            onLightSwitch={this.handleLightSwitch}\n          />\n          <ChartContainer\n            id=\"chart-container\"\n            loadChartData={this.loadChartData.bind(this)}\n            clearChart={this.clearChart.bind(this)}\n            charts={this.state.charts}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  createGraphBody = (chartNumber, data, category, subCategory) => {\n    let theme = this.getCurrentTheme();\n    let units;\n    // This section deals with keeping old values where relevant while updating theme (WIP).\n    let text = category\n      ? this.getChartTitle(category, subCategory)\n      : this.state.charts[chartNumber].title.text;\n    if (!this.state.charts[chartNumber].yAxis) {\n      units = this.getUnitofMeasurement(subCategory);\n    } else {\n      units = this.state.charts[chartNumber].yAxis.title.text;\n    }\n\n    let chartTemplate = {\n      title: {\n        text: text,\n        style: {\n          color: theme.textColor\n        }\n      },\n      chart: {\n        backgroundColor: theme.backgroundColor,\n        type: \"column\"\n      },\n      legend: {\n        enabled: false\n      },\n      xAxis: {\n        labels: {\n          style: {\n            color: theme.textColor\n          }\n        },\n        type: \"category\"\n      },\n      yAxis: {\n        gridLineColor: theme.gridColor,\n        labels: {\n          style: {\n            color: theme.textColor\n          }\n        },\n        title: {\n          style: {\n            color: theme.textColor\n          },\n          text: units\n        }\n      },\n      series: [\n        {\n          colorByPoint: true,\n          data: data ? data : this.state.charts[chartNumber].series[0].data\n        }\n      ]\n    };\n    return chartTemplate;\n  };\n\n  clearChart = chartNumber => {\n    let newCharts = this.state.charts;\n    newCharts[chartNumber] = {};\n    this.setState({\n      charts: newCharts\n    });\n  };\n\n  loadChartData = (category, subCategory, page, chartNumber, filter) => {\n    let charts = this.state.charts;\n    fetch(\"https://swapi.co/api/\" + category + \"/?page=\" + page)\n      .then(res => res.json())\n      .then(\n        result => {\n          charts[chartNumber] = this.createGraphBody(\n            chartNumber,\n            this.createChartData(result.results, subCategory, filter),\n            this.getChartTitle(category, subCategory),\n            subCategory\n          );\n          this.setState({\n            isLoaded: true,\n            charts: charts\n          });\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n\n  createChartData = (category, subCategory, filter) => {\n    let requestData = [];\n    for (let element of category) {\n      if (parseInt(element[subCategory]) < filter) {\n        requestData.push({\n          name: element.name,\n          y: parseInt(element[subCategory])\n        });\n      }\n    }\n\n    return requestData;\n  };\n\n  getUnitofMeasurement = subCategory => {\n    let unit;\n    if (subCategory === \"crew\" || subCategory === \"passengers\") {\n      unit = \"People\";\n    } else if (subCategory === \"length\") {\n      unit = \"Meters\";\n    } else if (subCategory === \"mass\") {\n      unit = \"Kilograms\";\n    } else if (subCategory === \"height\") {\n      unit = \"Centimeters\";\n    }\n    return unit;\n  };\n\n  getChartTitle = (category, subCategory) => {\n    let title;\n    title =\n      subCategory.charAt(0).toUpperCase() +\n      subCategory.slice(1) +\n      \" of \" +\n      category;\n    if (this.state.charts[0].title) {\n      console.log(\"Old title\", this.state.charts[0].title.text);\n    }\n    return title;\n  };\n}\n\nconst darkTheme = {\n  textColor: \"#E0E0E3\",\n  gridColor: \"#707073\",\n  backgroundColor: {\n    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 0 },\n    stops: [[0, \"#2a2a2b\"], [1, \"#3e3e40\"]]\n  }\n};\nconst lightTheme = {\n  textColor: \"#333333\",\n  gridColor: \"#e6e6e6\",\n  backgroundColor: \"#ffffff\"\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\n\n//render(<Chart chart={options} />, document.getElementById(\"root\"));\n//render(<ChartContainer />, document.getElementById(\"root\"));\n\nrender(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}